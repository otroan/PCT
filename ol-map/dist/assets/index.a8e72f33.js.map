{"version":3,"file":"index.a8e72f33.js","sources":["../../vite/modulepreload-polyfill","../../main.js"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import './style.css';\nimport {Map, View} from 'ol';\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer';\nimport XYZ from 'ol/source/XYZ';\nimport * as olProj from 'ol/proj';\n//import GeoJSON from 'ol/format/GeoJSON';\nimport GPX from 'ol/format/GPX';\nimport {OSM, Vector as VectorSource} from 'ol/source';\nimport Feature from 'ol/Feature';\nimport KML from 'ol/format/KML';\nimport Overlay from 'ol/Overlay'\n\nimport * as olCoordinate from 'ol/coordinate';\n\nconst pct_vector = new VectorLayer({\n    source: new VectorSource({\n        url: 'data/pct.gpx',\n        format: new GPX(),\n    }),\n});\n\nconst ole_vector = new VectorLayer({\n    source: new VectorSource({\n        url: 'data/OleTroan.kml',\n        // url: 'https://share.garmin.com/Feed/Share/OleTroan',\n        // url: 'https://share.garmin.com/Feed/Share/OleTroan\\?d1\\=2019-01-01',\n        format: new KML(),\n        crossOrigin: 'anonymous'\n    }),\n});\n      \nconst map = new Map({\n    target: 'map',\n    layers: [\n        // OpenStreetMap layer\n        new TileLayer({\n            source: new OSM()\n        }),\n        pct_vector,\n        ole_vector\n    ],\n    view: new View({\n        center: olProj.fromLonLat([-121.385723, 40.754215]),\n        zoom: 5\n    }),\n});\n"],"names":["olProj.fromLonLat"],"mappings":"4FAAA,KAAM,GAAI,UAAoB,CAC1B,KAAM,GAAU,SAAS,cAAc,QAAQ,QAC/C,GAAI,GAAW,EAAQ,UAAY,EAAQ,SAAS,iBAChD,OAEJ,SAAW,KAAQ,UAAS,iBAAiB,6BACzC,EAAe,GAEnB,GAAI,kBAAiB,AAAC,GAAc,CAChC,SAAW,KAAY,GACnB,GAAI,EAAS,OAAS,YAGtB,SAAW,KAAQ,GAAS,WACxB,AAAI,EAAK,UAAY,QAAU,EAAK,MAAQ,iBACxC,EAAe,KAG5B,QAAQ,SAAU,CAAE,UAAW,GAAM,QAAS,KACjD,WAAsB,EAAQ,CAC1B,KAAM,GAAY,GAClB,MAAI,GAAO,WACP,GAAU,UAAY,EAAO,WAC7B,EAAO,gBACP,GAAU,eAAiB,EAAO,gBACtC,AAAI,EAAO,cAAgB,kBACvB,EAAU,YAAc,UACvB,AAAI,EAAO,cAAgB,YAC5B,EAAU,YAAc,OAExB,EAAU,YAAc,cACrB,EAEX,WAAwB,EAAM,CAC1B,GAAI,EAAK,GAEL,OACJ,EAAK,GAAK,GAEV,KAAM,GAAY,EAAa,GAC/B,MAAM,EAAK,KAAM,KAEvB,AAAoB,IC5BtB,KAAM,GAAa,GAAI,GAAY,CAC/B,OAAQ,GAAI,GAAa,CACrB,IAAK,eACL,OAAQ,GAAI,OAId,EAAa,GAAI,GAAY,CAC/B,OAAQ,GAAI,GAAa,CACrB,IAAK,oBAGL,OAAQ,GAAI,GACZ,YAAa,gBAIT,GAAI,GAAI,CAChB,OAAQ,MACR,OAAQ,CAEJ,GAAI,GAAU,CACV,OAAQ,GAAI,KAEhB,EACA,GAEJ,KAAM,GAAI,GAAK,CACX,OAAQA,EAAkB,CAAC,YAAa,YACxC,KAAM"}